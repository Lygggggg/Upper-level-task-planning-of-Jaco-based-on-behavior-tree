<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->  
  <arg name="kinova_robotType" default="j2n6s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="use_trajectory_controller" default="true"/>
  <arg name="is7dof" default="false"/>

<!-- gazebo environment -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find robot_grasp)/worlds/jaco.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!--param name="robot_description"
    command="$(find xacro)/xacro --><!--inorder '$(find robot_grasp)/models/kinova/$(arg kinova_robotType)_withBase.xacro'" /-->
    
      <param name="robot_description"
    command="$(find xacro)/xacro --inorder '$(find robot_grasp)/models/kinova/$(arg kinova_robotType)_withBase.xacro'" />

 <node pkg="robot_grasp" type="listener.py" 
          name="mico_tf_listener"  output="screen" />

<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model object_on_table -param robot_description"/> 

<!-- load objects 
    <node name="spawn_cube_aruco" pkg="gazebo_ros" type="spawn_model" args="-file $(find robot_grasp)/models/grasp_object/cube_aruco/cube.sdf -sdf -model cube  -x 0.240161 -y -0.218802 -z 0.731732" respawn="false" output="screen" />  -->

<!-- load the trajectory controller-->
  <include file="$(find kinova_control)/launch/kinova_control.launch">
    <arg name="kinova_robotName" value="$(arg kinova_robotName)"/>
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
    <arg name="use_trajectory_controller" value="$(arg use_trajectory_controller)"/>
    <arg name="is7dof" value="$(arg is7dof)"/>
  </include> 

<!-- convert joint states to TF transforms for rviz, etc -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <!-- <node name="joint_state_publisher_gui" pkg="joint_state_publisher_gui" type="joint_state_publisher_gui" /> -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg kinova_robotName)/joint_states"/>
  </node>

  <node name="command_robot_home_pose" pkg="kinova_control" type="move_robot.py"
        respawn="false" output="screen" args="$(arg kinova_robotType)">
  </node>


<!-- run rviz 
  <node name="rviz" pkg="rviz" type="rviz" respawn="false"
  	output="screen" args="-d $(find robot_grasp)/config/perception.rviz">

  </node>
-->

</launch>

